/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sdmessage.proto */

#ifndef PROTOBUF_C_sdmessage_2eproto__INCLUDED
#define PROTOBUF_C_sdmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Data Data;
typedef struct MessageT MessageT;


/* --- enums --- */

typedef enum _MessageT__Opcode {
  MESSAGE_T__OPCODE__OP_BAD = 0,
  MESSAGE_T__OPCODE__OP_ADD = 10,
  MESSAGE_T__OPCODE__OP_GET = 20,
  MESSAGE_T__OPCODE__OP_DEL = 30,
  MESSAGE_T__OPCODE__OP_SIZE = 40,
  MESSAGE_T__OPCODE__OP_GETMODELS = 50,
  MESSAGE_T__OPCODE__OP_GETLISTBYTEAR = 60,
  MESSAGE_T__OPCODE__OP_ORDER = 70,
  MESSAGE_T__OPCODE__OP_ERROR = 99
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_T__OPCODE)
} MessageT__Opcode;
typedef enum _MessageT__CType {
  MESSAGE_T__C_TYPE__CT_BAD = 0,
  MESSAGE_T__C_TYPE__CT_DATA = 10,
  MESSAGE_T__C_TYPE__CT_MARCA = 20,
  MESSAGE_T__C_TYPE__CT_YEAR = 30,
  MESSAGE_T__C_TYPE__CT_MODEL = 40,
  MESSAGE_T__C_TYPE__CT_RESULT = 50,
  MESSAGE_T__C_TYPE__CT_LIST = 60,
  MESSAGE_T__C_TYPE__CT_NONE = 70
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_T__C_TYPE)
} MessageT__CType;
typedef enum _Marca {
  MARCA__MARCA_TOYOTA = 0,
  MARCA__MARCA_BMW = 1,
  MARCA__MARCA_RENAULT = 2,
  MARCA__MARCA_AUDI = 3,
  MARCA__MARCA_MERCEDES = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MARCA)
} Marca;
typedef enum _Combustivel {
  COMBUSTIVEL__COMBUSTIVEL_GASOLINA = 0,
  COMBUSTIVEL__COMBUSTIVEL_GASOLEO = 1,
  COMBUSTIVEL__COMBUSTIVEL_ELETRICO = 2,
  COMBUSTIVEL__COMBUSTIVEL_HIBRIDO = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COMBUSTIVEL)
} Combustivel;

/* --- messages --- */

struct  Data
{
  ProtobufCMessage base;
  int32_t ano;
  float preco;
  Marca marca;
  char *modelo;
  Combustivel combustivel;
};
#define DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data__descriptor) \
    , 0, 0, MARCA__MARCA_TOYOTA, (char *)protobuf_c_empty_string, COMBUSTIVEL__COMBUSTIVEL_GASOLINA }


struct  MessageT
{
  ProtobufCMessage base;
  MessageT__Opcode opcode;
  MessageT__CType c_type;
  Data *data;
  int32_t result;
  size_t n_models;
  char **models;
  size_t n_cars;
  Data **cars;
};
#define MESSAGE_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_t__descriptor) \
    , MESSAGE_T__OPCODE__OP_BAD, MESSAGE_T__C_TYPE__CT_BAD, NULL, 0, 0,NULL, 0,NULL }


/* Data methods */
void   data__init
                     (Data         *message);
size_t data__get_packed_size
                     (const Data   *message);
size_t data__pack
                     (const Data   *message,
                      uint8_t             *out);
size_t data__pack_to_buffer
                     (const Data   *message,
                      ProtobufCBuffer     *buffer);
Data *
       data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   data__free_unpacked
                     (Data *message,
                      ProtobufCAllocator *allocator);
/* MessageT methods */
void   message_t__init
                     (MessageT         *message);
size_t message_t__get_packed_size
                     (const MessageT   *message);
size_t message_t__pack
                     (const MessageT   *message,
                      uint8_t             *out);
size_t message_t__pack_to_buffer
                     (const MessageT   *message,
                      ProtobufCBuffer     *buffer);
MessageT *
       message_t__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_t__free_unpacked
                     (MessageT *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Data_Closure)
                 (const Data *message,
                  void *closure_data);
typedef void (*MessageT_Closure)
                 (const MessageT *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    marca__descriptor;
extern const ProtobufCEnumDescriptor    combustivel__descriptor;
extern const ProtobufCMessageDescriptor data__descriptor;
extern const ProtobufCMessageDescriptor message_t__descriptor;
extern const ProtobufCEnumDescriptor    message_t__opcode__descriptor;
extern const ProtobufCEnumDescriptor    message_t__c_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sdmessage_2eproto__INCLUDED */
